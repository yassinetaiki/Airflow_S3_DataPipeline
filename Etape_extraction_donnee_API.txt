Voici les étapes générales pour extraire des données à partir d'une API :

Identifier et sélectionner l'API appropriée : Il existe différentes API pour différentes
 sources de données. Il est important de sélectionner l'API appropriée en fonction de 
vos besoins.

Créer un compte développeur et obtenir les clés d'API : Pour accéder à une API, vous 
devez généralement créer un compte développeur et obtenir les clés d'API (API keys) 
nécessaires pour accéder à l'API.

Authentifier votre application : Avant de pouvoir accéder à l'API, vous devez fournir 
vos clés d'API pour authentifier votre application.

Envoyer une demande d'API : Pour extraire des données à partir d'une API, vous devez 
envoyer une demande d'API en spécifiant les paramètres appropriés. Les paramètres 
dépendent de l'API que vous utilisez.

Recevoir et traiter les données : Après avoir envoyé la demande d'API, vous recevrez
 les données en réponse. Les données peuvent être sous différents formats, tels que 
JSON, XML, CSV, etc. Vous devez ensuite traiter les données en fonction de vos besoins.

Répéter les étapes 4 et 5 jusqu'à ce que vous ayez toutes les données dont vous avez
 besoin : Selon le nombre de données que vous devez extraire, vous devrez peut-être 
répéter les étapes 4 et 5 plusieurs fois jusqu'à ce que vous ayez toutes les données 
dont vous avez besoin.

Stocker les données : Après avoir extrait les données, vous devez les stocker dans 
un format approprié pour une analyse ultérieure. Les formats courants sont CSV, 
Excel, JSON, etc.

### KEY ###
API KEY  : BxdnU4IHl1zSnAsxeeSmLyfLJ
API KEY SECRET  : xO9vmAhcKg5FTc48bBild8C9vWbjxz7wQfdK0RIU8OxKUOk6gE
Bearer Token : AAAAAAAAAAAAAAAAAAAAAOVFnAEAAAAAkXoJ2xWox%2BlIlCysxTMlLJkGQnc%3DGZmNj10346NdLvHxVGg9AvOFxxDe9lj6OLsRYUCWZZWlBAZMGx
Access Token : 1651889006857125890-HWohI4IwN77ypkW0qLX2ChHrsCaLbR
Access Token Secret : 5KFBNJwKl4lzaPV7kqpKblaGF77OObXF95Qd4iP632BCP

# authentification #
auth = tweepy.OAuthHandler(access_key, access_secret)
auth.set_access_token(consumer_key,consumer_secret)

## code recuperer tweet ###
tweets = api.user_timeline(screen_name='@elonmusk', 
                       #200 is the maximum allowed count
                        count=200,
                        include_rts = False,
                        # Necessary to keep full_text 
                         # otherwise only the first 140 words are extracted
                        tweet_mode = 'extended'
                         )
# print(tweets)
e code utilise l'API de Twitter via la bibliothèque Python Tweepy pour récupére
les 200 derniers tweets de l'utilisateur @elonmusk. Les paramètres spécifiés sont:
screen_name: le nom de l'utilisateur Twitter dont vous souhaitez récupérer les tweets
count: le nombre de tweets à récupérer (maximum de 200)
include_rts: spécifie si les retweets doivent être inclus ou non (ici, les retweets 
sont exclus)
tweet_mode: spécifie le mode de tweet à récupérer (ici, le mode étendu est utilisé
 pour récupérer tous les caractères du tweet au-delà de la limite de 140 caractères)

## liste option tweepy ##
api.search(q[, lang][, locale][, rpp][, page][, since_id][, geocode][, show_user]) : Cette 
option vous permet de rechercher des tweets à partir d'une requête donnée. Vous pouvez
 spécifier la langue, la localisation, le nombre de tweets par page, le tweet le plus 
récent à partir duquel vous souhaitez effectuer la recherche, la géolocalisation et la 
possibilité d'afficher les utilisateurs qui ont tweeté.

api.update_status(status[, in_reply_to_status_id][, auto_populate_reply_metadata][, 
exclude_reply_user_ids][, attachment_url][, possibly_sensitive][, place_id]
[, display_coordinates][, trim_user][, media_ids]) : Cette option vous permet de publier 
un nouveau tweet. Vous pouvez spécifier le texte du tweet, l'ID du tweet auquel vous 
répondez (si vous répondez à un tweet existant), l'URL d'une pièce jointe, la possibilité 
de masquer les utilisateurs de la réponse, la géolocalisation et les identifiants des 
médias joints.

api.get_status(id[, tweet_mode][, include_entities]) : Cette option vous permet de 
récupérer un tweet spécifique en utilisant son ID. Vous pouvez spécifier le mode de 
tweet, qui est 'extended' par défaut pour obtenir le texte complet du tweet, et la 
possibilité d'inclure les entités (hashtags, mentions, liens) du tweet.

api.get_user(screen_name=user_id) : Cette option vous permet de récupérer des 
informations sur un utilisateur en utilisant son nom d'utilisateur. Vous pouvez 
spécifier l'ID de l'utilisateur au lieu de son nom d'utilisateur.

api.followers(screen_name=user_id) : Cette option vous permet de récupérer une 
liste des followers d'un utilisateur donné. Vous pouvez spécifier l'ID de l'utilisateur
 au lieu de son nom d'utilisateur.

api.friends(screen_name=user_id) : Cette option vous permet de récupérer une liste des 
amis (comptes que l'utilisateur suit) d'un utilisateur donné. Vous pouvez spécifier 
l'ID de l'utilisateur au lieu de son nom d'utilisateur.

api.get_direct_messages([since_id][, max_id][, count][, full_text][, page]) : Cette
 option vous permet de récupérer une liste de messages directs reçus par l'utilisateur 
authentifié. Vous pouvez spécifier l'ID du message le plus récent que vous souhaitez 
récupérer, l'ID du message le plus ancien que vous souhaitez récupérer, le nombre de 
messages à récupérer et la possibilité d'obtenir le texte intégral du message.


### airflow / login ###
Login with username: admin  password: HttxhPRMCgGBDPQc